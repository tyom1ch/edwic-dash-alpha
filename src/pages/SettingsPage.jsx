import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  Button,
  TextField,
  Tabs,
  Tab,
  Typography,
  CircularProgress,
  Checkbox,
  FormControlLabel,
  ToggleButtonGroup,
  ToggleButton,
  Divider,
  Card,
  CardContent,
  useColorScheme,
} from "@mui/material";
import {
  LightMode,
  DarkMode,
  SettingsSystemDaydream,
  GitHub,
} from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
import useAppConfig from "../hooks/useAppConfig";
import { Capacitor } from "@capacitor/core";
import { Filesystem, Directory, Encoding } from "@capacitor/filesystem";
import { Share } from "@capacitor/share";
import useLocalStorage from "../hooks/useLocalStorage";

function SettingsPage({ brokers, setBrokers }) {
  const navigate = useNavigate();
  const { appConfig, setAppConfig } = useAppConfig();

  const { mode, setMode } = useColorScheme();
  const [themeMode, setThemeMode] = useLocalStorage("toolpad-mode", "system");

  const fileInputRef = useRef(null);

  const initialBrokerState = brokers?.length
    ? { ...brokers[0] }
    : {
        id: "",
        name: "–û—Å–Ω–æ–≤–Ω–∏–π –±—Ä–æ–∫–µ—Ä",
        host: "",
        port: "",
        username: "",
        password: "",
        discovery_topic: "homeassistant",
        secure: false,
        basepath: "",
      };

  const [currentBrokerConfig, setCurrentBrokerConfig] =
    useState(initialBrokerState);
  const [tabIndex, setTabIndex] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    if (brokers?.length) {
      setCurrentBrokerConfig({ ...brokers[0] });
    } else {
      setCurrentBrokerConfig(initialBrokerState);
    }
  }, [brokers]);

  const handleBrokerConfigChange = (e) => {
    const { name, value, type, checked } = e.target;
    setCurrentBrokerConfig((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSaveBroker = async () => {
    setError("");
    setLoading(true);
    try {
      if (!currentBrokerConfig.host || !currentBrokerConfig.port) {
        throw new Error("Host —Ç–∞ Port –±—Ä–æ–∫–µ—Ä–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏.");
      }
      const newBrokerId = currentBrokerConfig.id || `broker-${Date.now()}`;
      const brokerToSave = {
        ...currentBrokerConfig,
        id: newBrokerId,
        port: parseInt(currentBrokerConfig.port, 10),
        basepath: currentBrokerConfig.basepath || "",
        discovery_topic:
          currentBrokerConfig.discovery_topic?.trim() || "homeassistant",
      };
      const updatedBrokers = brokers?.length
        ? brokers.map((b, index) => (index === 0 ? brokerToSave : b))
        : [brokerToSave];
      setBrokers(updatedBrokers);
      alert(
        "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–æ–∫–µ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ó'—î–¥–Ω–∞–Ω–Ω—è –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."
      );
    } catch (err) {
      setError(err.message);
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—Ä–æ–∫–µ—Ä–∞:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleExportConfig = async () => {
    setError("");
    setLoading(true);

    try {
      const fileName = `edwic-backup-${new Date().toISOString().split("T")[0]}.json`;
      const json = JSON.stringify(appConfig, null, 2);

      if (Capacitor.isNativePlatform()) {
        const result = await Filesystem.writeFile({
          path: fileName,
          data: json,
          directory: Directory.Cache,
          encoding: Encoding.UTF8,
        });

        await Share.share({
          title: "–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è EdwIC",
          text: "üíæ –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª —É –Ω–∞–¥—ñ–π–Ω–æ–º—É –º—ñ—Å—Ü—ñ.",
          url: result.uri,
          dialogTitle: "–ó–±–µ—Ä–µ–≥—Ç–∏ –∞–±–æ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—é –∫–æ–ø—ñ—î—é",
        });
      } else {
        const blob = new Blob([json], { type: "application/json" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");

        link.href = url;
        link.download = fileName;

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        URL.revokeObjectURL(url);
      }
    } catch (err) {
      if (err.message !== "Share canceled") {
        setError(`–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: ${err.message}`);
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:", err);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleImportClick = () => fileInputRef.current.click();

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const importedConfig = JSON.parse(e.target.result);
        if (importedConfig?.brokers && importedConfig?.dashboards) {
          if (
            window.confirm(
              "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è? –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ñ."
            )
          ) {
            setAppConfig(importedConfig);
            alert(
              "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ! –î–æ–¥–∞—Ç–æ–∫ –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ."
            );
            window.location.reload();
          }
        } else {
          throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.");
        }
      } catch (err) {
        setError(`–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ${err.message}`);
        console.error("Import error:", err);
      }
    };
    reader.readAsText(file);
    event.target.value = null;
  };

  const handleReset = () => {
    if (
      window.confirm(
        "–í–ò –í–ü–ï–í–ù–ï–ù–Ü? –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –≤–∞—à—ñ –¥–∞—à–±–æ—Ä–¥–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–æ–∫–µ—Ä–∞. –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ü–µ –±—É–¥–µ –Ω–µ–º–æ–∂–ª–∏–≤–æ."
      )
    ) {
      localStorage.removeItem("appConfig");
      alert("–í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ. –î–æ–¥–∞—Ç–æ–∫ –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
      window.location.reload();
    }
  };

  // –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–º–∏
  const handleThemeChange = (e, newMode) => {
    if (!newMode) return;
    setThemeMode(newMode); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —ñ localStorage —á–µ—Ä–µ–∑ —Ö—É–∫
    setMode(newMode); // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–º—É MUI
  };

  return (
    <Box sx={{ maxWidth: 600, margin: "auto", padding: 2 }}>
      <Typography variant="h4" gutterBottom>
        –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è EdWic
      </Typography>

      <Tabs
        value={tabIndex}
        onChange={(e, newIndex) => setTabIndex(newIndex)}
        sx={{ mb: 2 }}
        variant="scrollable"
        scrollButtons="auto"
        allowScrollButtonsMobile
      >
        <Tab label="–†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è" />
        <Tab label="–ë—Ä–æ–∫–µ—Ä" />
        <Tab label="–î–æ–¥–∞—Ç–∫–æ–≤–æ" />
      </Tabs>

      {/* –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è */}
      {tabIndex === 0 && (
        <Box sx={{ mt: 2 }}>
          <Typography variant="h6" gutterBottom>
            –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Button
            variant="contained"
            fullWidth
            onClick={handleExportConfig}
            disabled={loading}
            sx={{ mb: 2 }}
          >
            {loading ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              "–ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
            )}
          </Button>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            style={{ display: "none" }}
            accept=".json"
          />
          <Button
            variant="contained"
            fullWidth
            sx={{ mb: 1 }}
            onClick={handleImportClick}
          >
            –Ü–º–ø–æ—Ä—Ç –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (JSON)
          </Button>
          <Button
            variant="contained"
            color="error"
            fullWidth
            onClick={handleReset}
          >
            –°–∫–∏–Ω—É—Ç–∏ –í—Å—ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
          </Button>
          <Typography
            variant="caption"
            display="block"
            sx={{ mt: 1, color: "text.secondary" }}
          >
            –¶–µ —Å–∫–∏–Ω–µ –≤—Å—ñ –±—Ä–æ–∫–µ—Ä–∏, –¥–∞—à–±–æ—Ä–¥–∏ —Ç–∞ –≤—ñ–¥–∂–µ—Ç–∏!
          </Typography>
          {error && (
            <Typography color="error" sx={{ mt: 2, wordBreak: "break-word" }}>
              {error}
            </Typography>
          )}
        </Box>
      )}

      {/* –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë—Ä–æ–∫–µ—Ä–∞ */}
      {tabIndex === 1 && (
        <Box sx={{ mt: 2 }}>
          <Typography variant="h6" gutterBottom>
            –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –û—Å–Ω–æ–≤–Ω–æ–≥–æ MQTT –ë—Ä–æ–∫–µ—Ä–∞
          </Typography>
          <TextField
            fullWidth
            label="IP –±—Ä–æ–∫–µ—Ä–∞ / Hostname"
            name="host"
            value={currentBrokerConfig.host}
            onChange={handleBrokerConfigChange}
            sx={{ mb: 2 }}
            required
          />
          <TextField
            fullWidth
            label="–ü–æ—Ä—Ç –±—Ä–æ–∫–µ—Ä–∞ (WebSockets, –Ω–∞–ø—Ä. 8083)"
            name="port"
            value={currentBrokerConfig.port}
            onChange={handleBrokerConfigChange}
            sx={{ mb: 2 }}
            type="number"
            required
          />
          <TextField
            fullWidth
            label="–õ–æ–≥—ñ–Ω"
            name="username"
            value={currentBrokerConfig.username}
            onChange={handleBrokerConfigChange}
            sx={{ mb: 2 }}
          />
          <TextField
            fullWidth
            label="–ü–∞—Ä–æ–ª—å"
            type="password"
            name="password"
            value={currentBrokerConfig.password}
            onChange={handleBrokerConfigChange}
            sx={{ mb: 2 }}
          />
          <TextField
            fullWidth
            label="–ë–∞–∑–æ–≤–∏–π —à–ª—è—Ö (Basepath, –Ω–∞–ø—Ä. /ws)"
            name="basepath"
            value={currentBrokerConfig.basepath}
            onChange={handleBrokerConfigChange}
            sx={{ mb: 2 }}
            helperText="–Ø–∫—â–æ –±—Ä–æ–∫–µ—Ä –≤–∏–º–∞–≥–∞—î —à–ª—è—Ö —É URL –¥–ª—è WebSockets (–Ω–∞–ø—Ä. /ws, /mqtt)"
          />
          <TextField
            fullWidth
            label="–¢–æ–ø—ñ–∫ –¥–ª—è Discovery"
            name="discovery_topic"
            value={currentBrokerConfig.discovery_topic}
            onChange={handleBrokerConfigChange}
            sx={{ mb: 2 }}
            helperText="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 'homeassistant' (–±–µ–∑ #). –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ 'homeassistant'."
          />
          <FormControlLabel
            control={
              <Checkbox
                checked={!!currentBrokerConfig.secure}
                onChange={handleBrokerConfigChange}
                name="secure"
              />
            }
            label="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Secure WebSockets (WSS)"
            sx={{ mb: 2 }}
          />
          {error && (
            <Typography color="error" sx={{ mb: 2 }}>
              {error}
            </Typography>
          )}
          <Button
            variant="contained"
            fullWidth
            onClick={handleSaveBroker}
            disabled={loading}
          >
            {loading ? (
              <CircularProgress size={24} />
            ) : (
              "–ó–±–µ—Ä–µ–≥—Ç–∏ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë—Ä–æ–∫–µ—Ä–∞"
            )}
          </Button>
        </Box>
      )}

      {/* –ù–û–í–ê –í–ö–õ–ê–î–ö–ê: –í—ñ–∑—É–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
      {tabIndex === 2 && (
        <Box sx={{ mt: 2, display: "flex", flexDirection: "column", gap: 4 }}>
          {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏ */}
          <Box>
            <Typography variant="h6" gutterBottom>
              –¢–µ–º–∞ –¥–æ–¥–∞—Ç–∫—É
            </Typography>
            <ToggleButtonGroup
              color="primary"
              value={themeMode}
              exclusive
              onChange={handleThemeChange}
              aria-label="theme mode"
              fullWidth
            >
              <ToggleButton value="light" aria-label="—Å–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞">
                <LightMode sx={{ mr: 1 }} />
                –°–≤—ñ—Ç–ª–∞
              </ToggleButton>
              <ToggleButton value="dark" aria-label="—Ç–µ–º–Ω–∞ —Ç–µ–º–∞">
                <DarkMode sx={{ mr: 1 }} />
                –¢–µ–º–Ω–∞
              </ToggleButton>
              <ToggleButton value="system" aria-label="—Å–∏—Å—Ç–µ–º–Ω–∞ —Ç–µ–º–∞">
                <SettingsSystemDaydream sx={{ mr: 1 }} />
                –°–∏—Å—Ç–µ–º–Ω–∞
              </ToggleButton>
            </ToggleButtonGroup>
          </Box>

          {/* –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ */}
          <Box>
            <Divider sx={{ mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫
            </Typography>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="body1" gutterBottom>
                  –ó–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫—É —á–∏ –º–∞—î—Ç–µ —ñ–¥–µ—é?
                </Typography>
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{ mb: 2 }}
                >
                  –í–∞—à –≤—ñ–¥–≥—É–∫ –¥–æ–ø–æ–º–∞–≥–∞—î –∑—Ä–æ–±–∏—Ç–∏ EdwIC –∫—Ä–∞—â–∏–º. –ù–∞–π–∫—Ä–∞—â–∏–π —Å–ø–æ—Å—ñ–±
                  –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é ‚Äî
                  —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ GitHub.
                </Typography>
                <Button
                  variant="contained"
                  startIcon={<GitHub />}
                  href="https://github.com/tyom1ch/edwic-dash-alpha/issues/new/choose"
                  target="_blank" // –í—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
                  rel="noopener noreferrer" // –î–æ–±—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
                  fullWidth
                >
                  –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –Ω–∞ GitHub
                </Button>
              </CardContent>
            </Card>
          </Box>
        </Box>
      )}

      <Button
        variant="outlined"
        fullWidth
        sx={{ mt: 4 }}
        onClick={() =>
          navigate(`/${Object.keys(appConfig.dashboards)[0] || ""}`)
        }
      >
        –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –î–∞—à–±–æ—Ä–¥
      </Button>
    </Box>
  );
}

export default SettingsPage;
