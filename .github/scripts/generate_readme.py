import subprocess
import os
import re
# –Ø–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ google.generativeai, –∞ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π google.genai
# import google.generativeai as genai 
from google import genai # –ó–∞–ª–∏—à—Ç–µ –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î

# =================================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API-–∫–ª—ñ—î–Ω—Ç–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à –∫–ª—é—á API
# –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, GOOGLE_API_KEY).
# os.environ['GOOGLE_API_KEY'] = '–í–ê–®_–ö–õ–Æ–ß_API'
# genai.configure(api_key=os.environ['GOOGLE_API_KEY'])
# client = genai.GenerativeModel('gemini-1.5-flash') # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
# =================================================================

# --- –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê GIT ---

def get_sorted_tags():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–µ–≥—ñ–≤, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    (–≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ).
    """
    try:
        tags_raw = subprocess.check_output(
            ["git", "tag", "--sort=-creatordate"],
            text=True, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ text=True –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
            stderr=subprocess.PIPE
        ).strip()
        return tags_raw.split('\n') if tags_raw else []
    except subprocess.CalledProcessError:
        return []

def get_diff_between_tags(old_tag, new_tag):
    """
    –û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω–∏–π –¥–∏—Ñ—Ñ (–∑–º—ñ–Ω–∏ –∫–æ–¥—É) –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º—ñ—Ç—ñ–≤ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–µ–≥–∞–º–∏.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `git log -p`.
    """
    command = ["git", "log", "-p"] # -p –¥–æ–¥–∞—î —Å–∞–º—ñ –∑–º—ñ–Ω–∏ –∫–æ–¥—É (patch)
    
    if old_tag:
        # –î—ñ–∞–ø–∞–∑–æ–Ω –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —ñ –Ω–æ–≤–∏–º —Ç–µ–≥–æ–º
        command.append(f"{old_tag}..{new_tag}")
    else:
        # –Ø–∫—â–æ —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ–º–∞—î (–ø–µ—Ä—à–∏–π —Ä–µ–ª—ñ–∑), –±–µ—Ä–µ–º–æ –≤—Å—ñ –∫–æ–º—ñ—Ç–∏ –¥–æ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        command.append(new_tag)
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ text=True –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        return subprocess.check_output(command, text=True, stderr=subprocess.PIPE).strip()
    except subprocess.CalledProcessError as e:
        print(f"Error executing git log: {e.stderr}")
        return ""

# 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–µ–≥–∏, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —á–∞—Å–æ–º
all_tags = get_sorted_tags()

if not all_tags:
    print("Error: No tags found in the repository. Exiting.")
    exit(1)

# 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ–≥–∏
current_tag = all_tags[0]
previous_tag = all_tags[1] if len(all_tags) > 1 else None # None –∫—Ä–∞—â–µ, –Ω—ñ–∂ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

print(f"-> Detected current tag: {current_tag}")
print(f"-> Detected previous tag: {previous_tag or 'None (first release)'}")

# 3. –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –¥–∏—Ñ—Ñ, —â–æ –≤–∫–ª—é—á–∞—î –∑–º—ñ–Ω–∏ –∫–æ–¥—É
diff_data = get_diff_between_tags(previous_tag, current_tag)

# 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –Ω–µ —Ç—É—Ä–±—É—î–º–æ API
if not diff_data:
    print("-> No new commits or changes found between tags. README will not be updated.")
    exit(0)

print("\n--- Sending detailed diff data to the API for analysis ---")
# –û–±–º–µ–∂–∏–º–æ –≤–∏–≤—ñ–¥ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π
print(diff_data[:1000] + "\n..." if len(diff_data) > 1000 else diff_data)
print("----------------------------------------------------------\n")

# --- –ö–Ü–ù–ï–¶–¨ –û–ù–û–í–õ–ï–ù–û–á –õ–û–ì–Ü–ö–ò ---


# --- –û–ù–û–í–õ–ï–ù–ò–ô –¢–ê –ü–û–ö–†–ê–©–ï–ù–ò–ô –ü–†–û–ú–ü–¢ ---
prompt = f"""
–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫–∏–π —Ç–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–π changelog —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –≤–µ—Ä—Å—ñ—ó {current_tag}.

–¢–∏ –æ—Ç—Ä–∏–º–∞—î—à –≤–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ `git log -p`. –¶–µ–π –≤–∏–≤—ñ–¥ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Ç–∏: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–≤—Ç–æ—Ä, –¥–∞—Ç–∞, —ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ ‚Äî —Å–∞–º—ñ –∑–º—ñ–Ω–∏ –≤ –∫–æ–¥—ñ (diff).
–†—è–¥–∫–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ `+`, ‚Äî —Ü–µ –¥–æ–¥–∞–Ω–∏–π –∫–æ–¥.
–†—è–¥–∫–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ `-`, ‚Äî —Ü–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∫–æ–¥.
–†—è–¥–∫–∏ –±–µ–∑ —Ü–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ ‚Äî —Ü–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç.

**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:**
1.  **–ê–Ω–∞–ª—ñ–∑—É–π –∑–º—ñ–Ω–∏ –≤ –∫–æ–¥—ñ, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É.** –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º, –∞ –∫–æ–¥ ‚Äî —Ü–µ –ø—Ä–∞–≤–¥–∞.
2.  –ù–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –º–∞—é—Ç—å –±—É—Ç–∏ —Ç–∞–∫–∏–º–∏: `‚ú® –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ`, `‚ôªÔ∏è –ó–º—ñ–Ω–∏`, `üêõ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è`, `üßπ –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏`.
3.  **–ù–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.** –Ø–∫—â–æ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ª–∏—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É —á–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É, –≤—ñ–¥–Ω–æ—Å—å —ó—Ö –¥–æ `üßπ –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏`.
4.  –°—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ä–µ–ª—ñ–∑—É –æ–¥–Ω–∏–º-–¥–≤–æ–º–∞ —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥" –∞–±–æ "–ù–æ–≤—ñ —Ñ—ñ—á—ñ").
5.  **–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—î –±—É—Ç–∏ —á—ñ—Ç–∫–∏–º, –±–µ–∑ –≤—Å—Ç—É–ø–Ω–∏—Ö —Å–ª—ñ–≤, –ø–æ—è—Å–Ω–µ–Ω—å —á–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.** –ü–æ–≤–µ—Ä—Ç–∞–π –ª–∏—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**
<–æ–ø–∏—Å —Ä–µ–ª—ñ–∑—É –æ–¥–Ω–∏–º-–¥–≤–æ–º–∞ —Å–ª–æ–≤–∞–º–∏>
‚ú® **–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ**
- <—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –Ω–æ–≤–∏—Ö —Ñ—ñ—á>
‚ôªÔ∏è **–ó–º—ñ–Ω–∏**
- <—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –∑–º—ñ–Ω>
üêõ **–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è**
- <—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –±–∞–≥—Ñ—ñ–∫—Å—ñ–≤>
üßπ **–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏**
- <–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–º—ñ—Ç—Ç—è, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–æ—â–æ>

**–û—Å—å –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:**
```
{diff_data}
```
"""

# –í–∑–∞—î–º–æ–¥—ñ—è –∑ Gemini API. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∞—à client –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
# –î–ª—è –Ω–æ–≤–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫ google.generativeai –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:
# response = client.generate_content(prompt)
# –î–ª—è —Å—Ç–∞—Ä–æ—ó google.genai:
# –ó–∞–º—ñ–Ω—ñ—Ç—å `genai.Client().models.generate_content` –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è –≤–∞—à–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–∞–∫, —è–∫ –±—É–ª–æ —É –≤–∞—Å:
client = genai.Client()

response = client.models.generate_content(
    model="gemini-2.0-flash", # –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–π–Ω–æ–≤—ñ—à—É –º–æ–¥–µ–ª—å
    contents=prompt
)
# =========================================================================

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è README.md –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –º–∞–π–∂–µ –±–µ–∑ –∑–º—ñ–Ω
try:
    with open("README.md", "r", encoding="utf-8") as f:
        old_content = f.read()

    new_changelog = response.text.strip()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π –±–ª–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏, –≤–∫–ª—é—á–∞—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ—Ä—Å—ñ—ó
    full_new_content_to_insert = f"## {current_tag}\n\n{new_changelog}"

    # –ü–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É –±–ª–æ–∫—É changelog
    pattern = r"(<!-- CHANGELOG START -->\n)(.*?)(\n<!-- CHANGELOG END -->)"

    # –ó–∞–º—ñ–Ω–∞: –≤—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –ª–æ–≥ –ü–Ü–°–õ–Ø –º–∞—Ä–∫–µ—Ä–∞ —ñ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
    # –¢–∞–∫–∏–º —á–∏–Ω–æ–º, —É –≤–∞—Å –±—É–¥–µ —ñ—Å—Ç–æ—Ä—ñ—è –≤—Å—ñ—Ö changelog'—ñ–≤.
    # \1 - <!-- CHANGELOG START -->\n
    # \2 - —Å—Ç–∞—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    # \3 - \n<!-- CHANGELOG END -->
    # replacement = f"\\1{full_new_content_to_insert}\n\n\\2\\3"

    # –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –ó–ê–ú–Ü–ù–Ø–¢–ò —Å—Ç–∞—Ä–∏–π –ª–æ–≥ –Ω–∞ –Ω–æ–≤–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π replacement:
    replacement = f"\\1{full_new_content_to_insert}\\3"
    
    new_readme = re.sub(pattern, replacement, old_content, flags=re.DOTALL)

    if new_readme == old_content:
        print("Could not find '<!-- CHANGELOG START -->' and '<!-- CHANGELOG END -->' markers in README.md.")
        print("Please add them to your README.md file.")
        exit(1)

    with open("README.md", "w", encoding="utf-8") as f:
        f.write(new_readme)

    print(f"‚úÖ README.md has been successfully updated with changelog for tag {current_tag}.")

except FileNotFoundError:
    print("Error: README.md not found in the current directory.")
    exit(1)
except Exception as e:
    print(f"An unexpected error occurred: {e}")
    # –ú–æ–∂–ª–∏–≤–æ, –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –≤—ñ–¥ API
    print("--- API Response Text ---")
    print(response.text)
    print("-------------------------")
    exit(1)